{"version":3,"sources":["components/AddTasks.js","components/Task.js","components/TaskList.js","App.js","reportWebVitals.js","components/redux/todoReducer.js","components/redux/todoStore.js","index.js"],"names":["AddTasks","useSelector","state","todos","dispatch","useDispatch","useState","current","setCurrent","AddTask","event","preventDefault","length","type","payload","id","Date","now","toString","task","complete","alert","onSubmit","className","placeholder","aria-label","value","onChange","target","onClick","Task","props","edit","setEdit","markComplete","updateTask","TaskList","completed","filter","i","remain","map","todo","index","draggableId","provided","ref","innerRef","draggableProps","dragHandleProps","App","onDragEnd","res","destination","items","Array","from","splice","source","reordered","droppableId","droppableProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","todoReducer","action","afterremove","item","selectedtask","status","afterremovecompleted","afterUpdatecompleted","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f13f1f0a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nfunction AddTasks() {\r\n    const state = useSelector(state => state.todos)\r\n    const dispatch = useDispatch()\r\n    const [current, setCurrent] = useState(\"\")\r\n\r\n    function AddTask(event) {\r\n        event.preventDefault()\r\n        if (current.length >= 1) {\r\n            dispatch({\r\n                type: \"ADD\",\r\n                payload: { id: Date.now().toString(), task: current, complete: false }\r\n            })\r\n            setCurrent(\"\")\r\n        }\r\n        else{\r\n            alert(\"Can't add empty task\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={AddTask}>\r\n            <div className=\"text-field\">\r\n                <input className=\"input-field\" type=\"text\" placeholder=\"Write your task...\" aria-label=\"Full name\" value={current} onChange={event => setCurrent(event.target.value)} />\r\n                <button className=\"btn\" type=\"button\" onClick={AddTask}>Add?</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddTasks;\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport '../App.css'\r\nfunction Task(props) {\r\n    const { id, task, complete } = props\r\n    const state = useSelector(state => state.todos)\r\n    const dispatch = useDispatch()\r\n    const [edit, setEdit] = useState()\r\n\r\n    function markComplete() {\r\n        dispatch({\r\n            type: \"COMPLETE\",\r\n            payload: {\r\n                id: id,\r\n                task: task\r\n            }\r\n        })\r\n    }\r\n\r\n    function editTask() {\r\n        if (edit) {\r\n            setEdit(\"\")\r\n        }\r\n        else {\r\n            setEdit(task)\r\n        }\r\n    }\r\n\r\n    function updateTask() {\r\n        dispatch({\r\n            type: \"UPDATE\",\r\n            payload: {\r\n                id: id,\r\n                task: edit,\r\n                complete: complete\r\n            }\r\n        })\r\n        setEdit()\r\n    }\r\n\r\n    function deleteTask() {\r\n        dispatch({\r\n            type: \"DEL\",\r\n            payload: { id: id }\r\n        })\r\n    }\r\n    return (\r\n        <li className=\"task-list\">\r\n            <div className=\"cursor-pointer\">\r\n                {complete == true ? <i onClick={markComplete}></i> : <i onClick={markComplete} ></i>}\r\n                {edit ? (\r\n                    <form onSubmit={updateTask}>\r\n                        <div className=\"text-field-edit\">\r\n                            <input className=\"input-field\" type=\"text\" placeholder=\"list\" aria-label=\"Full name\" value={edit} onChange={event => setEdit(event.target.value)} />\r\n                            <button className=\"btn\" type=\"button\" onClick={updateTask}>Update</button>\r\n                        </div>\r\n                    </form>\r\n                ) : (<span onClick={markComplete} className={complete === true ? \"text-black-300 line-through\" : \"\"}>\r\n                    <span className=\"todo-text\">{task}</span></span>)}\r\n            </div>\r\n            <div>\r\n                <i className=\"edit-btn\" onClick={editTask}> Edit</i>\r\n                <i className=\"delete-btn\" onClick={deleteTask}> Delete</i>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Task;\r\n","import React from 'react'\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport { useSelector } from 'react-redux'\r\nimport AddTaskForm from './AddTasks'\r\nimport Task from './Task'\r\n\r\nfunction TaskList() {\r\n    const todos = useSelector(state => state.todos)\r\n    const completed = (todos.filter(i => i.complete === true)).length\r\n    const remain = (todos.filter(i => i.complete === false)).length\r\n    return (\r\n        <>\r\n            <h2 className=\"header\">Todo list App</h2>\r\n            <p className=\"task-details\">\r\n                {(todos.length === 0) ? \"\" : (remain === 0) ? \"Every Task Is Finished !\" : (remain >= 1 && completed == 0) ? `${remain} Task remaining & No task finished` : `${remain} Task remaining & ${completed} task finished`}\r\n            </p>\r\n            <AddTaskForm />\r\n            <div className=\"mt-4\">\r\n                <ul>\r\n                    {todos.map((todo, index) => {\r\n                        return (\r\n                            <Draggable draggableId={todo.id} index={index} key={todo.id}>\r\n                                {provided => (\r\n                                    <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                        <Task id={todo.id} task={todo.task} complete={todo.complete} />\r\n                                    </div>\r\n                                )}\r\n                            </Draggable>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default TaskList;\r\n","import TaskList from './components/TaskList';\r\nimport { Provider, useDispatch, useSelector } from \"react-redux\"\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\"\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const state = useSelector(state => state.todos)\r\n\r\n  function ending(res) {\r\n    if (!res.destination) return;\r\n    const items = Array.from(state)\r\n    const [reordered] = items.splice(res.source.index, 1);\r\n    items.splice(res.destination.index, 0, reordered);\r\n\r\n    dispatch({\r\n      type: \"SET\",\r\n      payload: items,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <section className=\"app-bg\">\r\n      <div className=\"container\">\r\n        <div\r\n          className=\"container-box\">\r\n          <div>\r\n            <DragDropContext onDragEnd={ending}>\r\n              <Droppable droppableId=\"Todo\">\r\n                {(provided) => (\r\n                  <div ref={provided.innerRef} {...provided.droppableProps}>\r\n                    <TaskList />\r\n                    {provided.placeholder}\r\n                  </div>\r\n                )}\r\n              </Droppable>\r\n            </DragDropContext>\r\n          </div>\r\n          <div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState = {\r\n    todos: [\r\n    ]\r\n}\r\nfunction todoReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"ADD\":\r\n            return { ...state, todos: [action.payload, ...state.todos] }\r\n        case \"DEL\":\r\n            const afterremove = state.todos.filter(item => item.id !== action.payload.id)\r\n            return { ...state, todos: afterremove }\r\n        case \"COMPLETE\":\r\n            const selectedtask = state.todos.filter(item => item.id === action.payload.id)[0]\r\n            const status = selectedtask.complete == true ? false : true\r\n            const afterremovecompleted = state.todos.filter(item => item.id !== action.payload.id)\r\n            return { ...state, todos: [...afterremovecompleted, { ...action.payload, complete: status }] }\r\n        case \"UPDATE\":\r\n            const afterUpdatecompleted = state.todos.filter(item => item.id !== action.payload.id)\r\n            return { ...state, todos: [action.payload, ...afterUpdatecompleted] }\r\n        case \"SET\":\r\n            return { ...state, todos: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default todoReducer;","import { createStore } from \"redux\";\r\nimport todoReducer from \"./todoReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\"\r\n\r\nconst store = createStore(todoReducer, composeWithDevTools())\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport store from \"./components/redux/todoStore\"  \r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}