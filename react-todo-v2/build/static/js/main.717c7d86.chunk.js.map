{"version":3,"sources":["components/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["item","id","v4","name","item2","item3","Tasks","useState","text","setText","title","items","state","setState","className","type","value","onChange","e","target","onClick","prev","todo","onDragEnd","destination","source","index","droppableId","itemCopy","splice","_","map","data","key","provided","snapshot","ref","innerRef","droppableProps","el","draggableId","console","log","isDragging","draggableProps","dragHandleProps","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRAMMA,EAAO,CACXC,GAAIC,cACJC,KAAM,kCAGFC,EAAQ,CACZH,GAAIC,cACJC,KAAM,sCAEFE,EAAQ,CACZJ,GAAIC,cACJC,KAAM,2BAwHOG,MArHf,WAAkB,IAAD,EACSC,mBAAS,IADlB,mBACRC,EADQ,KACFC,EADE,OAEWF,mBAAS,CACjC,KAAQ,CACNG,MAAO,aACPC,MAAO,CAACX,EAAMI,EAAOC,IAEvB,cAAe,CACbK,MAAO,cACPC,MAAO,IAET,KAAQ,CACND,MAAO,YACPC,MAAO,MAbI,mBAERC,EAFQ,KAEDC,EAFC,KA8Df,OACE,yBAAKC,UAAU,aACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,cACf,2CAEI,2BAAOA,UAAU,cAAcC,KAAK,OAAOC,MAAOR,EAAMS,SAAU,SAACC,GAAD,OAAOT,EAAQS,EAAEC,OAAOH,UAC1F,4BAAQF,UAAU,MAAMM,QA3Bd,WACdP,GAAS,SAAAQ,GACP,OAAO,2BACFA,GADL,IAEEC,KAAM,CACJZ,MAAO,OACPC,MAAM,CACJ,CACEV,GAAIC,cACJC,KAAMK,IAHL,mBAKAa,EAAKC,KAAKX,cAMrBF,EAAQ,MAUJ,SAEF,kBAAC,IAAD,CAAiBc,UAtDC,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,OACnC,GAAKD,IAIDA,EAAYE,QAAUD,EAAOC,OAASF,EAAYG,cAAgBF,EAAOE,aAA7E,CAKA,IAAMC,EAAQ,eAAOhB,EAAMa,EAAOE,aAAahB,MAAMc,EAAOC,QAE5Db,GAAS,SAAAQ,GASP,OARAA,EAAI,eAAOA,IAENI,EAAOE,aAAahB,MAAMkB,OAAOJ,EAAOC,MAAO,GAIpDL,EAAKG,EAAYG,aAAahB,MAAMkB,OAAOL,EAAYE,MAAO,EAAGE,GAE1DP,QAkCJS,IAAEC,IAAInB,GAAO,SAACoB,EAAMC,GACnB,OACE,yBAAKA,IAAKA,EAAKnB,UAAW,UACxB,4BAAKkB,EAAKtB,OACV,kBAAC,IAAD,CAAWiB,YAAaM,IACrB,SAACC,EAAUC,GACV,OACE,uCACEC,IAAKF,EAASG,UACVH,EAASI,eAFf,CAGExB,UAAW,kBAEVkB,EAAKrB,MAAMoB,KAAI,SAACQ,EAAIb,GACnB,OACE,kBAAC,IAAD,CAAWO,IAAKM,EAAGtC,GAAIyB,MAAOA,EAAOc,YAAaD,EAAGtC,KAClD,SAACiC,EAAUC,GAEV,OADAM,QAAQC,IAAIP,GAEV,uCACErB,UAAS,eAAUqB,EAASQ,YAAc,YAC1CP,IAAKF,EAASG,UACVH,EAASU,eACTV,EAASW,iBAEZN,EAAGpC,YAOf+B,EAASY,wBC/GjBC,MALf,WACE,OACF,kBAAC,EAAD,OCGoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.717c7d86.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport '../App.css';\r\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\r\nimport _ from \"lodash\";\r\nimport {v4} from \"uuid\";\r\n\r\nconst item = {\r\n  id: v4(),\r\n  name: \"Complete the todo app with dnd\"\r\n}\r\n\r\nconst item2 = {\r\n  id: v4(),\r\n  name: \"Complete the internship assignment\"\r\n}\r\nconst item3 = {\r\n  id: v4(),\r\n  name: \"Watch The Boys season 2\"\r\n}\r\n\r\nfunction Tasks() {\r\n  const [text, setText] = useState(\"\")\r\n  const [state, setState] = useState({\r\n    \"todo\": {\r\n      title: \"Todo Tasks\",\r\n      items: [item, item2, item3]\r\n    },\r\n    \"in-progress\": {\r\n      title: \"In Progress\",\r\n      items: []\r\n    },\r\n    \"done\": {\r\n      title: \"Completed\",\r\n      items: []\r\n    }\r\n  })\r\n\r\n  const handleDragEnd = ({destination, source}) => {\r\n    if (!destination) {\r\n      return\r\n    }\r\n\r\n    if (destination.index === source.index && destination.droppableId === source.droppableId) {\r\n      return\r\n    }\r\n\r\n    // Creating a copy of item before removing it from state\r\n    const itemCopy = {...state[source.droppableId].items[source.index]}\r\n\r\n    setState(prev => {\r\n      prev = {...prev}\r\n      // Remove from previous items array\r\n      prev[source.droppableId].items.splice(source.index, 1)\r\n\r\n\r\n      // Adding to new items array location\r\n      prev[destination.droppableId].items.splice(destination.index, 0, itemCopy)\r\n\r\n      return prev\r\n    })\r\n  }\r\n\r\n  const addItem = () => {\r\n    setState(prev => {\r\n      return {\r\n        ...prev,\r\n        todo: {\r\n          title: \"Todo\",\r\n          items: [\r\n            {\r\n              id: v4(),\r\n              name: text\r\n            },\r\n            ...prev.todo.items\r\n          ]\r\n        }\r\n      }\r\n    })\r\n\r\n    setText(\"\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n    <div className=\"container-box\">\r\n    <div className=\"text-field\">\r\n    <h1> TODO APP. </h1>\r\n    \r\n        <input className=\"input-field\" type=\"text\" value={text} onChange={(e) => setText(e.target.value)}/>\r\n        <button className=\"btn\" onClick={addItem}>Add?</button>\r\n      </div>\r\n      <DragDropContext onDragEnd={handleDragEnd}>\r\n        {_.map(state, (data, key) => {\r\n          return(\r\n            <div key={key} className={\"column\"}>\r\n              <h3>{data.title}</h3>\r\n              <Droppable droppableId={key}>\r\n                {(provided, snapshot) => {\r\n                  return(\r\n                    <div\r\n                      ref={provided.innerRef}\r\n                      {...provided.droppableProps}\r\n                      className={\"droppable-col\"}\r\n                    >\r\n                      {data.items.map((el, index) => {\r\n                        return(\r\n                          <Draggable key={el.id} index={index} draggableId={el.id}>\r\n                            {(provided, snapshot) => {\r\n                              console.log(snapshot)\r\n                              return(\r\n                                <div\r\n                                  className={`item ${snapshot.isDragging && \"dragging\"}`}\r\n                                  ref={provided.innerRef}\r\n                                  {...provided.draggableProps}\r\n                                  {...provided.dragHandleProps}\r\n                                >\r\n                                  {el.name}\r\n                                </div>\r\n                              )\r\n                            }}\r\n                          </Draggable>\r\n                        )\r\n                      })}\r\n                      {provided.placeholder}\r\n                    </div>\r\n                  )\r\n                }}\r\n              </Droppable>\r\n            </div>\r\n          )\r\n        })}\r\n      </DragDropContext>\r\n    </div>\r\n</div>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\r\nimport _ from \"lodash\";\r\nimport {v4} from \"uuid\";\r\n// import Tasks from './components/Taskupdate'\r\nimport OldTasks from './components/Tasks'\r\nfunction App() {\r\n  return (\r\n<OldTasks/>\r\n    )  }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}